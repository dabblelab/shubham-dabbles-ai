generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             String           @id @default(cuid())
  name           String?
  username       String           @unique
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  isRoot         Boolean          @default(false)
  accounts       Account[]
  sessions       Session[]
  messageHistory MessageHistory[]
}

model Assistant {
  id            String  @id @default(cuid())
  name          String?
  description   String?
  image         String?
  system_prompt String?
}

model MessageHistory {
  id          String      @id @default(cuid())
  assistantId String
  role        MessageRole
  type        MessageType @default(text)
  text        String?
  owner       User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  raw         Json?

  @@index([assistantId])
}

enum MessageRole {
  user
  assistant
}

enum MessageType {
  text
  image
  video
  audio
  file
}
